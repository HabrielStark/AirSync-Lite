name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

# Minimal permissions (security best practice)
permissions:
  contents: read

jobs:
  # ============================================================================
  # SECURITY AUDIT
  # ============================================================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0 (pinned by SHA)
      
      - name: Setup Node.js
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Audit production dependencies
        run: npm audit --production --audit-level=moderate
        
      - name: Generate SBOM
        run: npm run sbom
        
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: sbom
          path: sbom.json
          retention-days: 90
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca # v0.16.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@2cb752a87e96af96708ab57187ab6372ee1973ab # v2.22.0
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # BUILD & TEST (Multi-platform)
  # ============================================================================
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
      
      - name: Setup Node.js
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run linter
        run: npm run lint
        
      - name: Build main process
        run: npm run build:main
        
      - name: Run unit tests
        run: npm run test:unit
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Run full test suite with coverage
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
        if: matrix.os == 'ubuntu-latest'
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Install Playwright browsers
        if: matrix.os == 'ubuntu-latest'
        run: npx playwright install --with-deps chromium
        
      - name: Run E2E tests
        if: matrix.os == 'ubuntu-latest'
        run: npm run test:e2e
        env:
          CI: true
          
      - name: Upload E2E artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        if: failure() && matrix.os == 'ubuntu-latest'
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ============================================================================
  # BUILD ELECTRON PACKAGES (Multi-platform)
  # ============================================================================
  build-electron:
    name: Build Electron on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [security-audit, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
      
      - name: Setup Node.js
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build application
        run: npm run build
        
      - name: Package Electron app
        run: npm run pack
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: electron-build-${{ matrix.os }}
          path: dist-app/
          retention-days: 7

  # ============================================================================
  # FINAL REPORT
  # ============================================================================
  report:
    name: Generate Final Report
    runs-on: ubuntu-latest
    needs: [security-audit, test, build-electron]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        
      - name: Generate summary
        run: |
          echo "## ðŸŽ¯ CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Security audit completed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Multi-platform builds successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- SBOM (Software Bill of Materials)" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy vulnerability scan results" >> $GITHUB_STEP_SUMMARY
          echo "- Code coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- Electron packages (Linux/Windows/macOS)" >> $GITHUB_STEP_SUMMARY
